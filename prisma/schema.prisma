// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  firstName     String
  lastName      String
  password      String
  grade         Int
  state         String
  school        String?
  parentEmail   String?
  parentApproved Boolean  @default(false)
  points        Int       @default(0)
  level         Int       @default(1)
  role          String    @default("student") // "student", "admin", "moderator", "viewer"
  permissions   String[]  @default([]) // Array of specific permissions
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  submissions   Submission[]
  teamMembers   TeamMember[]
  createdTeams  Team[]      @relation("TeamCreator")
  emailLogs     EmailLog[]
  pageViews     PageView[]
  userActions   UserAction[]
  userEngagement UserEngagement[]
  
  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  color       String    @default("#6366f1")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relationships
  challenges  Challenge[]
  
  @@map("categories")
}

model Challenge {
  id          String    @id @default(cuid())
  title       String
  description String
  difficulty  String    // "Easy", "Medium", "Hard"
  categoryId  String
  grade       Int       // 9, 10, 11, 12
  points      Int
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relationships
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  submissions Submission[]
  analytics   ChallengeAnalytics?
  
  @@unique([title, grade])
  @@map("challenges")
}

model Submission {
  id          String    @id @default(cuid())
  userId      String
  challengeId String
  answer      String
  score       Int?
  status      String    @default("pending") // "pending", "approved", "rejected"
  adminNotes  String?
  reviewedAt  DateTime?
  reviewedBy  String?
  submittedAt DateTime  @default(now())
  
  // Relationships
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  
  @@map("submissions")
}

model Team {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  creatorId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relationships
  creator     User      @relation("TeamCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  members     TeamMember[]
  
  @@map("teams")
}

model TeamMember {
  id        String   @id @default(cuid())
  userId    String
  teamId    String
  joinedAt  DateTime @default(now())
  
  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, teamId])
  @@map("team_members")
}

model Prize {
  id          String    @id @default(cuid())
  name        String
  description String
  imageUrl    String?
  value       Float?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  
  @@map("prizes")
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String
  date        DateTime
  location    String?
  isVirtual   Boolean   @default(false)
  maxAttendees Int?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  
  @@map("events")
}

model Advisor {
  id          String    @id @default(cuid())
  name        String
  title       String
  company     String
  expertise   String
  bio         String
  achievements String[] // Array of achievement strings
  imageUrl    String?
  isActive    Boolean   @default(true)
  order       Int       @default(0) // For custom ordering
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("advisors")
}

model EmailTemplate {
  id          String    @id @default(cuid())
  name        String    @unique
  type        String    // "confirm_email", "welcome", "new_challenge", "newsletter", "custom"
  subject     String
  content     String    // HTML content
  variables   String[]  // Array of available variables like {{userName}}, {{challengeTitle}}, etc.
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relationships
  campaigns   EmailCampaign[]
  
  @@map("email_templates")
}

model EmailCampaign {
  id          String    @id @default(cuid())
  name        String
  templateId  String?
  subject     String
  content     String    // HTML content
  status      String    @default("draft") // "draft", "scheduled", "sending", "sent", "cancelled"
  scheduledAt DateTime?
  sentAt      DateTime?
  totalRecipients Int    @default(0)
  sentCount   Int       @default(0)
  failedCount Int       @default(0)
  filters     String?   // JSON string for recipient filters
  createdBy   String    // Admin ID who created the campaign
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relationships
  template    EmailTemplate? @relation(fields: [templateId], references: [id])
  emailLogs   EmailLog[]
  
  @@map("email_campaigns")
}

model EmailLog {
  id          String    @id @default(cuid())
  campaignId  String?
  userId      String
  email       String
  subject     String
  status      String    // "sent", "delivered", "bounced", "failed"
  sentAt      DateTime  @default(now())
  deliveredAt DateTime?
  errorMessage String?
  
  // Relationships
  campaign    EmailCampaign? @relation(fields: [campaignId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  
  @@map("email_logs")
}

// Analytics and Tracking Models
model PageView {
  id          String    @id @default(cuid())
  userId      String?
  sessionId   String
  page        String    // "/dashboard", "/challenges", etc.
  referrer    String?
  userAgent   String?
  ipAddress   String?
  timestamp   DateTime  @default(now())
  duration    Int?      // Time spent on page in seconds
  
  // Relationships
  user        User?     @relation(fields: [userId], references: [id])
  
  @@map("page_views")
}

model UserAction {
  id          String    @id @default(cuid())
  userId      String
  action      String    // "login", "signup", "start_challenge", "submit_solution", etc.
  metadata    String?   // JSON string for additional data
  timestamp   DateTime  @default(now())
  ipAddress   String?
  
  // Relationships
  user        User      @relation(fields: [userId], references: [id])
  
  @@map("user_actions")
}

model ChallengeAnalytics {
  id          String    @id @default(cuid())
  challengeId String    @unique
  totalViews  Int       @default(0)
  totalStarts Int       @default(0)
  totalSubmissions Int  @default(0)
  avgCompletionTime Int? // Average time to complete in minutes
  successRate Float?    // Percentage of successful submissions
  difficultyRating Float? // Average user difficulty rating
  lastUpdated DateTime  @default(now())
  
  // Relationships
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  
  @@map("challenge_analytics")
}

model UserEngagement {
  id          String    @id @default(cuid())
  userId      String
  date        DateTime  @default(now())
  loginCount  Int       @default(0)
  pageViews   Int       @default(0)
  timeSpent   Int       @default(0) // Total time spent in minutes
  challengesStarted Int @default(0)
  challengesCompleted Int @default(0)
  submissionsMade Int   @default(0)
  pointsEarned Int      @default(0)
  
  // Relationships
  user        User      @relation(fields: [userId], references: [id])
  
  @@map("user_engagement")
}

model ConversionFunnel {
  id          String    @id @default(cuid())
  date        DateTime  @default(now())
  stage       String    // "landing_page", "signup", "first_login", "first_challenge", "first_submission"
  visitors    Int       @default(0)
  conversions Int       @default(0)
  conversionRate Float  @default(0)
  
  @@map("conversion_funnel")
}

model GeographicAnalytics {
  id          String    @id @default(cuid())
  state       String
  date        DateTime  @default(now())
  totalUsers  Int       @default(0)
  activeUsers Int       @default(0)
  totalSubmissions Int  @default(0)
  avgPoints   Float     @default(0)
  avgEngagement Float   @default(0)
  
  @@map("geographic_analytics")
}

model PerformanceMetrics {
  id          String    @id @default(cuid())
  date        DateTime  @default(now())
  metric      String    // "page_load_time", "api_response_time", "error_rate"
  value       Float
  unit        String    // "ms", "percentage", "count"
  
  @@map("performance_metrics")
}
